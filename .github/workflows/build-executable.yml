name: Auto Build Python Executable

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'img/**'
      - '.github/workflows/auto_build_executable.yml'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
            repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
            token: ${{ secrets.PYD_PAT }}
            path: B

      - name: Install B's build dependencies (Linux)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (Linux)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (Linux)
        run: |
          cp B/client_mod.*.so . || true

      - name: Cache Dependencies (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies (Linux)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable (Linux)
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_amd64-$VERSION \
            --clean \
            main.py

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/TomatoNovelDownloader-Linux_amd64-*

  build-linux-arm64:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (Linux ARM64)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (Linux ARM64)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (Linux ARM64)
        run: |
          cp B/client_mod.*.so . || true

      - name: Cache Dependencies (Linux ARM64)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies (Linux ARM64)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable (Linux ARM64)
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_arm64-$VERSION \
            --clean \
            main.py

      - name: Upload Linux ARM64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-build
          path: dist/TomatoNovelDownloader-Linux_arm64-*

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if (Test-Path "B\requirements.txt") {
            pip install -r B\requirements.txt
          }
        shell: powershell

      - name: Build Cython extension from B (Windows)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..
        shell: powershell

      - name: Copy compiled B extension into A's root (Windows)
        run: |
          Copy-Item "B\client_mod*.pyd" "." -Force
        shell: powershell

      - name: Cache Dependencies (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        shell: powershell

      - name: Download UPX (Windows)
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          Invoke-WebRequest -Uri $url -OutFile upx.zip
          Expand-Archive -Path upx.zip -DestinationPath upx
        shell: powershell

      - name: Build Executable (Windows)
        run: |
          $upxDir = "$pwd\upx\upx-5.0.0-win64"
          if (Test-Path "$upxDir\upx.exe") {
            icacls "$upxDir\upx.exe" /grant Everyone:F
          }
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $version = "sha-${{ github.sha }}"
          }
          pyinstaller --onefile `
            --upx-dir "$upxDir" `
            --collect-data fake_useragent `
            --hidden-import=portalocker `
            -i img/Tomato-downlaoder-ico.ico `
            --name=TomatoNovelDownloader-Win64-$version `
            --clean `
            main.py
        shell: powershell

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist\TomatoNovelDownloader-Win64-*.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (macOS arm64)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (macOS arm64)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (macOS arm64)
        run: |
          cp B/client_mod.*.so . || true

      - name: Cache Dependencies (macOS arm64)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies (macOS arm64)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable (macOS arm64)
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-macOS_arm64-$VERSION \
            --clean \
            main.py

      - name: Upload macOS arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/TomatoNovelDownloader-macOS_arm64-*

  build-macos-intel:
    runs-on: macos-13
    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (macOS Intel)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (macOS Intel)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (macOS Intel)
        run: |
          cp B/client_mod.*.so . || true

      - name: Cache Dependencies (macOS Intel)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies (macOS Intel)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable (macOS Intel)
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-macOS_amd64-$VERSION \
            --clean \
            main.py

      - name: Upload macOS Intel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: dist/TomatoNovelDownloader-macOS_amd64-*

  publish-release:
    needs: [build-linux, build-linux-arm64, build-windows, build-macos, build-macos-intel]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List Artifacts
        run: ls -R release-artifacts

      - name: Generate Release Notes
        id: generate_notes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = context.ref.replace('refs/tags/', '');
            const releasesResp = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });
            const releases = releasesResp.data;
            const tags = releases.map(r => r.tag_name);
            const idx = tags.indexOf(tag);
            const prev = idx < releases.length - 1 ? releases[idx+1] : null;
            const since = prev ? prev.published_at : null;
            const prevTag = prev ? prev.tag_name : null;
            const compareUrl = prevTag ? `https://github.com/${owner}/${repo}/compare/${prevTag}...${tag}` : '';
            const params = { owner, repo, state: 'closed', per_page: 100 };
            if (since) params.since = since;
            const issuesResp = await github.rest.issues.listForRepo(params);
            const items = issuesResp.data.filter(item =>
              !item.labels.some(lbl => ['wontfix', 'duplicate'].includes(lbl.name.toLowerCase()))
            );
            const groups = { Fix: [], Update: [], Feature: [] };
            items.forEach(item => {
              item.labels.forEach(lbl => {
                if (lbl.name === 'bug') groups.Fix.push(item);
                else if (lbl.name === 'update') groups.Update.push(item);
                else if (lbl.name === 'enhancement') groups.Feature.push(item);
              });
            });
            let body = "# What's Changed\n\n";
            const zh = { Fix: '修复', Update: '更新', Feature: '新增' };
            for (const key of ['Fix','Update','Feature']) {
              if (groups[key].length) {
                body += `## ${key}\n\n`;
                for (const i of groups[key]) {
                  body += `- ${zh[key]}：[#${i.number}](${i.html_url}) ${i.title}\n`;
                }
                body += "\n";
              }
            }
            if (compareUrl) {
              body += `**Full Changelog**: ${compareUrl}\n`;
            }
            return body;

      - name: Create Unified Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Tomato Novel Downloader ${{ github.ref_name }}
          body: ${{ steps.generate_notes.outputs.result }}
          files: |
            release-artifacts/linux-build/TomatoNovelDownloader-Linux_amd64-*
            release-artifacts/linux-arm64-build/TomatoNovelDownloader-Linux_arm64-*
            release-artifacts/windows-build/TomatoNovelDownloader-Win64-*.exe
            release-artifacts/macos-build/TomatoNovelDownloader-macOS_arm64-*
            release-artifacts/macos-intel-build/TomatoNovelDownloader-macOS_amd64-*