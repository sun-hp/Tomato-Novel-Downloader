name: Refresh Build
on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - build_trigger

permissions:
  contents: write

jobs:
  fetch_and_clean:
    name: 获取最新 Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_latest_tag.outputs.Tag }}
    steps:
      - name: Checkout 仓库（完整拉取）
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取最新 Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags | head -n 1)
          echo "Tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "获取到最新 Tag: $LATEST_TAG"

  build-linux:
    name: 构建 Linux AMD64 可执行文件
    needs: fetch_and_clean
    runs-on: ubuntu-latest
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_TAG }}

      - name: Setup Python (Linux)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout 私有仓库 B 并编译 Cython 扩展 (Linux)
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: 安装 B 的构建依赖 (Linux)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then pip install -r B/requirements.txt; fi

      - name: 编译 Cython 扩展 (Linux)
        run: |
          cd B
          python setup.py build_ext --inplace
          if [ -f setup_offical.py ]; then
            echo "Building fanqie_mod via setup_offical.py"
            python setup_offical.py build_ext --inplace
          else
            echo "setup_offical.py missing (fanqie_mod not built)"
          fi
          cd ..

      - name: 将编译好的 .so 文件复制到仓库根目录 (Linux)
        run: |
          cp B/fanqie_mod.*.so . 2>/dev/null || true
          cp novel_src/offical_tools/TTEncrypt.py . 2>/dev/null || true

      - name: 缓存 A 仓库的 pip 依赖 (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装 A 仓库所需依赖 (Linux)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 使用 PyInstaller 打包成可执行文件 (Linux)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            --hidden-import=TTEncrypt \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_amd64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/TomatoNovelDownloader-*

  build-linux-arm64:
    name: 构建 Linux ARM64 可执行文件
    needs: fetch_and_clean
    runs-on: ubuntu-24.04-arm
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_TAG }}

      - name: Setup Python (Linux ARM64)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout 私有仓库 B 并编译 Cython 扩展 (Linux ARM64)
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: 安装 B 的构建依赖 (Linux ARM64)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then pip install -r B/requirements.txt; fi

      - name: 编译 Cython 扩展 (Linux ARM64)
        run: |
          cd B
          python setup.py build_ext --inplace
          if [ -f setup_offical.py ]; then
            echo "Building fanqie_mod via setup_offical.py"
            python setup_offical.py build_ext --inplace
          else
            echo "setup_offical.py missing (fanqie_mod not built)"
          fi
          cd ..

      - name: 将编译好的 .so 文件复制到仓库根目录 (Linux ARM64)
        run: |
          cp B/fanqie_mod.*.so . 2>/dev/null || true
          cp novel_src/offical_tools/TTEncrypt.py . 2>/dev/null || true

      - name: 缓存 A 仓库的 pip 依赖 (Linux ARM64)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装 A 仓库所需依赖 (Linux ARM64)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 使用 PyInstaller 打包成可执行文件 (Linux ARM64)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            --hidden-import=TTEncrypt \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_arm64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: Upload Linux ARM64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-build
          path: dist/TomatoNovelDownloader-*

  build-windows:
    name: 构建 Windows 可执行文件
    needs: fetch_and_clean
    runs-on: windows-latest
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_TAG }}

      - name: Setup Python (Windows)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout 私有仓库 B 并编译 Cython 扩展 (Windows)
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: 安装 B 的构建依赖 (Windows)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if (Test-Path "B\\requirements.txt") { pip install -r B\\requirements.txt }

      - name: 编译 Cython 扩展 (Windows)
        shell: pwsh
        run: |
          cd B
          python setup.py build_ext --inplace
          if (Test-Path 'setup_offical.py') {
            Write-Host 'Building fanqie_mod via setup_offical.py'
            python setup_offical.py build_ext --inplace
          } else {
            Write-Host 'setup_offical.py missing (fanqie_mod not built)'
          }
          cd ..

      - name: 将编译好的 .pyd 文件复制到仓库根目录 (Windows)
        shell: pwsh
        run: |
          Get-ChildItem B\fanqie_mod*.pyd -ErrorAction SilentlyContinue | ForEach-Object { Copy-Item $_ -Destination . -Force }
          if (Test-Path novel_src\offical_tools\TTEncrypt.py) { Copy-Item novel_src\offical_tools\TTEncrypt.py . -Force }

      - name: 缓存 A 仓库的 pip 依赖 (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装 A 仓库所需依赖 (Windows)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 下载并准备 UPX (Windows)
        shell: pwsh
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          Invoke-WebRequest -Uri $url -OutFile upx.zip
          Expand-Archive -Path upx.zip -DestinationPath upx

      - name: 使用 PyInstaller 打包成可执行文件 (Windows)
        shell: pwsh
        run: |
          $upxDir = "$pwd\upx\upx-5.0.0-win64"
          if (Test-Path "$upxDir\upx.exe") { icacls "$upxDir\upx.exe" /grant Everyone:F }
          pyinstaller --onefile `
            --upx-dir "$upxDir" `
            --collect-data fake_useragent `
            --hidden-import=portalocker `
            --hidden-import=TTEncrypt `
            -i img/Tomato-downlaoder-ico.ico `
            --name=TomatoNovelDownloader-Win64-${{ env.BUILD_TAG }} `
            --clean `
            main.py

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist\TomatoNovelDownloader-*.exe

  build-macos:
    name: 构建 macOS (arm64) 可执行文件
    needs: fetch_and_clean
    runs-on: macos-latest
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_TAG }}

      - name: Setup Python (macOS)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout 私有仓库 B 并编译 Cython 扩展 (macOS)
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: 安装 B 的构建依赖 (macOS)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then pip install -r B/requirements.txt; fi

      - name: 编译 Cython 扩展 (macOS)
        run: |
          cd B
          python setup.py build_ext --inplace
          if [ -f setup_offical.py ]; then
            echo "Building fanqie_mod via setup_offical.py"
            python setup_offical.py build_ext --inplace
          else
            echo "setup_offical.py missing (fanqie_mod not built)"
          fi
          cd ..

      - name: 将编译好的 .so 文件复制到仓库根目录 (macOS)
        run: |
          cp B/fanqie_mod.*.so . 2>/dev/null || true
          cp novel_src/offical_tools/TTEncrypt.py . 2>/dev/null || true

      - name: 缓存 A 仓库的 pip 依赖 (macOS)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装 A 仓库所需依赖 (macOS)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 使用 PyInstaller 打包成可执行文件 (macOS arm64)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            --hidden-import=TTEncrypt \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-macOS_arm64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/TomatoNovelDownloader-macOS_arm64-*

  build-macos-intel:
    name: 构建 macOS (Intel x86_64) 可执行文件
    needs: fetch_and_clean
    runs-on: macos-13
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_TAG }}

      - name: Setup Python (macOS Intel)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Checkout 私有仓库 B 并编译 Cython 扩展 (macOS Intel)
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: 安装 B 的构建依赖 (macOS Intel)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then pip install -r B/requirements.txt; fi

      - name: 编译 Cython 扩展 (macOS Intel)
        run: |
          cd B
          python setup.py build_ext --inplace
          if [ -f setup_offical.py ]; then
            echo "Building fanqie_mod via setup_offical.py"
            python setup_offical.py build_ext --inplace
          else
            echo "setup_offical.py missing (fanqie_mod not built)"
          fi
          cd ..

      - name: 将编译好的 .so 文件复制到仓库根目录 (macOS Intel)
        run: |
          cp B/fanqie_mod.*.so . 2>/dev/null || true
          cp novel_src/offical_tools/TTEncrypt.py . 2>/dev/null || true

      - name: 缓存 A 仓库的 pip 依赖 (macOS Intel)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装 A 仓库所需依赖 (macOS Intel)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 使用 PyInstaller 打包成可执行文件 (macOS Intel)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            --hidden-import=TTEncrypt \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-macOS_amd64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: Upload macOS Intel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: dist/TomatoNovelDownloader-macOS_amd64-*

  upload_assets:
    name: 上传构建产物到 Release
    needs:
      - fetch_and_clean
      - build-linux
      - build-linux-arm64
      - build-windows
      - build-macos
      - build-macos-intel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout A Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 删除旧资产
        uses: andreaswilli/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.fetch_and_clean.outputs.tag }}
          deleteOnlyFromDrafts: false

      - name: 上传所有构建产物 (softprops/action-gh-release@v2)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.fetch_and_clean.outputs.tag }}
          files: |
            release-artifacts/linux-build/TomatoNovelDownloader-Linux_amd64-*
            release-artifacts/linux-arm64-build/TomatoNovelDownloader-Linux_arm64-*
            release-artifacts/windows-build/TomatoNovelDownloader-Win64-*.exe
            release-artifacts/macos-build/TomatoNovelDownloader-macOS_arm64-*
            release-artifacts/macos-intel-build/TomatoNovelDownloader-macOS_amd64-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}